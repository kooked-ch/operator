name: Build Docker image

on:
    push:
        branches:
            - main

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            issues: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log into registry ${{ env.REGISTRY }}
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Get version from setup.py
              id: get_version
              run: |
                  version=$(python -c "from setuptools import setup; print(setup().get_version())")
                  echo "Version: $version"
                  echo "version=$version" >> $GITHUB_ENV

            - name: Check if release exists
              id: check_release
              run: |
                  release_exists=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.version }} | jq -r .message)
                  if [[ "$release_exists" == "Not Found" ]]; then
                      echo "Creating release for version ${{ env.version }}..."
                      curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                      -d "{\"tag_name\": \"${{ env.version }}\", \"name\": \"Release ${{ env.version }}\"}" \
                      https://api.github.com/repos/${{ github.repository }}/releases
                  else
                      echo "Release already exists for version ${{ env.version }}."
                  fi

            - name: Get Latest Release
              id: get_release
              run: |
                  latest_release=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .name)
                  echo "Latest release: $latest_release"
                  echo "latest_release=$latest_release" >> $GITHUB_ENV

            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      latest,
                      ${{ env.latest_release }},
                      ${{ env.version }}

            - name: Echo tags
              run: echo ${{ steps.meta.outputs.tags }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest , ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.version }} , ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.latest_release }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
